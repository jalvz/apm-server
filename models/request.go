// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Request request
// swagger:model Request
type Request struct {

	// body
	Body interface{} `json:"body,omitempty"`

	// cookies
	Cookies interface{} `json:"cookies,omitempty"`

	// env
	Env interface{} `json:"env,omitempty"`

	// headers
	Headers *RequestHeaders `json:"headers,omitempty"`

	// http version
	// Max Length: 1024
	HTTPVersion string `json:"http_version,omitempty"`

	// method
	// Required: true
	// Max Length: 1024
	Method *string `json:"method"`

	// socket
	Socket *RequestSocket `json:"socket,omitempty"`

	// url
	// Required: true
	URL *RequestURL `json:"url"`
}

// Validate validates this request
func (m *Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeaders(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSocket(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Request) validateHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	if m.Headers != nil {

		if err := m.Headers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headers")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateHTTPVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPVersion) { // not required
		return nil
	}

	if err := validate.MaxLength("http_version", "body", string(m.HTTPVersion), 1024); err != nil {
		return err
	}

	return nil
}

func (m *Request) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	if err := validate.MaxLength("method", "body", string(*m.Method), 1024); err != nil {
		return err
	}

	return nil
}

func (m *Request) validateSocket(formats strfmt.Registry) error {

	if swag.IsZero(m.Socket) { // not required
		return nil
	}

	if m.Socket != nil {

		if err := m.Socket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("socket")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if m.URL != nil {

		if err := m.URL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("url")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Request) UnmarshalBinary(b []byte) error {
	var res Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
