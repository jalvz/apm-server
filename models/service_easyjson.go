// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCd93bc43DecodeGithubComElasticApmServerModels(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agent":
			if in.IsNull() {
				in.Skip()
				out.Agent = nil
			} else {
				if out.Agent == nil {
					out.Agent = new(Agent)
				}
				(*out.Agent).UnmarshalEasyJSON(in)
			}
		case "environment":
			out.Environment = string(in.String())
		case "framework":
			if in.IsNull() {
				in.Skip()
				out.Framework = nil
			} else {
				if out.Framework == nil {
					out.Framework = new(Framework)
				}
				(*out.Framework).UnmarshalEasyJSON(in)
			}
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				if out.Language == nil {
					out.Language = new(Language)
				}
				(*out.Language).UnmarshalEasyJSON(in)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "runtime":
			if in.IsNull() {
				in.Skip()
				out.Runtime = nil
			} else {
				if out.Runtime == nil {
					out.Runtime = new(Runtime)
				}
				(*out.Runtime).UnmarshalEasyJSON(in)
			}
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCd93bc43EncodeGithubComElasticApmServerModels(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Agent == nil {
			out.RawString("null")
		} else {
			(*in.Agent).MarshalEasyJSON(out)
		}
	}
	if in.Environment != "" {
		const prefix string = ",\"environment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Environment))
	}
	if in.Framework != nil {
		const prefix string = ",\"framework\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Framework).MarshalEasyJSON(out)
	}
	if in.Language != nil {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Language).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Runtime != nil {
		const prefix string = ",\"runtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Runtime).MarshalEasyJSON(out)
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd93bc43EncodeGithubComElasticApmServerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd93bc43EncodeGithubComElasticApmServerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd93bc43DecodeGithubComElasticApmServerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd93bc43DecodeGithubComElasticApmServerModels(l, v)
}
