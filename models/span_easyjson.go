// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1ea3e754DecodeGithubComElasticApmServerModels(in *jlexer.Lexer, out *Span) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "context":
			if in.IsNull() {
				in.Skip()
				out.Context = nil
			} else {
				if out.Context == nil {
					out.Context = new(SpanContext)
				}
				easyjson1ea3e754DecodeGithubComElasticApmServerModels1(in, &*out.Context)
			}
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(float64)
				}
				*out.Duration = float64(in.Float64())
			}
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "parent":
			out.Parent = int64(in.Int64())
		case "stacktrace":
			if in.IsNull() {
				in.Skip()
				out.Stacktrace = nil
			} else {
				in.Delim('[')
				if out.Stacktrace == nil {
					if !in.IsDelim(']') {
						out.Stacktrace = make(SpanStacktrace, 0, 8)
					} else {
						out.Stacktrace = SpanStacktrace{}
					}
				} else {
					out.Stacktrace = (out.Stacktrace)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *StacktraceFrame
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(StacktraceFrame)
						}
						easyjson1ea3e754DecodeGithubComElasticApmServerModels2(in, &*v1)
					}
					out.Stacktrace = append(out.Stacktrace, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				if out.Start == nil {
					out.Start = new(float64)
				}
				*out.Start = float64(in.Float64())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1ea3e754EncodeGithubComElasticApmServerModels(out *jwriter.Writer, in Span) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Context != nil {
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson1ea3e754EncodeGithubComElasticApmServerModels1(out, *in.Context)
	}
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Duration == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Duration))
		}
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Parent != 0 {
		const prefix string = ",\"parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Parent))
	}
	{
		const prefix string = ",\"stacktrace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Stacktrace == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Stacktrace {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson1ea3e754EncodeGithubComElasticApmServerModels2(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Start == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Start))
		}
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Type == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Type))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Span) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1ea3e754EncodeGithubComElasticApmServerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Span) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1ea3e754EncodeGithubComElasticApmServerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Span) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1ea3e754DecodeGithubComElasticApmServerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Span) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1ea3e754DecodeGithubComElasticApmServerModels(l, v)
}
func easyjson1ea3e754DecodeGithubComElasticApmServerModels2(in *jlexer.Lexer, out *StacktraceFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "abs_path":
			out.AbsPath = string(in.String())
		case "colno":
			out.Colno = int64(in.Int64())
		case "context_line":
			out.ContextLine = string(in.String())
		case "filename":
			if in.IsNull() {
				in.Skip()
				out.Filename = nil
			} else {
				if out.Filename == nil {
					out.Filename = new(string)
				}
				*out.Filename = string(in.String())
			}
		case "function":
			out.Function = string(in.String())
		case "library_frame":
			out.LibraryFrame = bool(in.Bool())
		case "lineno":
			if in.IsNull() {
				in.Skip()
				out.Lineno = nil
			} else {
				if out.Lineno == nil {
					out.Lineno = new(int64)
				}
				*out.Lineno = int64(in.Int64())
			}
		case "module":
			out.Module = string(in.String())
		case "post_context":
			if in.IsNull() {
				in.Skip()
				out.PostContext = nil
			} else {
				in.Delim('[')
				if out.PostContext == nil {
					if !in.IsDelim(']') {
						out.PostContext = make([]string, 0, 4)
					} else {
						out.PostContext = []string{}
					}
				} else {
					out.PostContext = (out.PostContext)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.PostContext = append(out.PostContext, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pre_context":
			if in.IsNull() {
				in.Skip()
				out.PreContext = nil
			} else {
				in.Delim('[')
				if out.PreContext == nil {
					if !in.IsDelim(']') {
						out.PreContext = make([]string, 0, 4)
					} else {
						out.PreContext = []string{}
					}
				} else {
					out.PreContext = (out.PreContext)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.PreContext = append(out.PreContext, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]interface{})
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 interface{}
					if m, ok := v6.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v6.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v6 = in.Interface()
					}
					(out.Vars)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1ea3e754EncodeGithubComElasticApmServerModels2(out *jwriter.Writer, in StacktraceFrame) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AbsPath != "" {
		const prefix string = ",\"abs_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AbsPath))
	}
	if in.Colno != 0 {
		const prefix string = ",\"colno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Colno))
	}
	if in.ContextLine != "" {
		const prefix string = ",\"context_line\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContextLine))
	}
	{
		const prefix string = ",\"filename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Filename == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Filename))
		}
	}
	if in.Function != "" {
		const prefix string = ",\"function\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Function))
	}
	if in.LibraryFrame {
		const prefix string = ",\"library_frame\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.LibraryFrame))
	}
	{
		const prefix string = ",\"lineno\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Lineno == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Lineno))
		}
	}
	if in.Module != "" {
		const prefix string = ",\"module\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Module))
	}
	{
		const prefix string = ",\"post_context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PostContext == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.PostContext {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pre_context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.PreContext == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.PreContext {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Vars {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if m, ok := v11Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v11Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v11Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson1ea3e754DecodeGithubComElasticApmServerModels1(in *jlexer.Lexer, out *SpanContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "db":
			if in.IsNull() {
				in.Skip()
				out.Db = nil
			} else {
				if out.Db == nil {
					out.Db = new(SpanContextDb)
				}
				easyjson1ea3e754DecodeGithubComElasticApmServerModels3(in, &*out.Db)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1ea3e754EncodeGithubComElasticApmServerModels1(out *jwriter.Writer, in SpanContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Db != nil {
		const prefix string = ",\"db\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson1ea3e754EncodeGithubComElasticApmServerModels3(out, *in.Db)
	}
	out.RawByte('}')
}
func easyjson1ea3e754DecodeGithubComElasticApmServerModels3(in *jlexer.Lexer, out *SpanContextDb) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = string(in.String())
		case "statement":
			out.Statement = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1ea3e754EncodeGithubComElasticApmServerModels3(out *jwriter.Writer, in SpanContextDb) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Instance != "" {
		const prefix string = ",\"instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Instance))
	}
	if in.Statement != "" {
		const prefix string = ",\"statement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Statement))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	out.RawByte('}')
}
