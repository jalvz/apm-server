// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Service service
// swagger:model Service
type Service struct {

	// agent
	// Required: true
	Agent *Agent `json:"agent"`

	// environment
	// Max Length: 1024
	Environment string `json:"environment,omitempty"`

	// framework
	Framework *Framework `json:"framework,omitempty"`

	// language
	Language *Language `json:"language,omitempty"`

	// name
	// Required: true
	// Max Length: 1024
	// Pattern: ^[a-zA-Z0-9 _-]+$
	Name *string `json:"name"`

	// runtime
	Runtime *Runtime `json:"runtime,omitempty"`

	// version
	// Max Length: 1024
	Version string `json:"version,omitempty"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFramework(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateAgent(formats strfmt.Registry) error {

	if err := validate.Required("agent", "body", m.Agent); err != nil {
		return err
	}

	if m.Agent != nil {

		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if err := validate.MaxLength("environment", "body", string(m.Environment), 1024); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateFramework(formats strfmt.Registry) error {

	if swag.IsZero(m.Framework) { // not required
		return nil
	}

	if m.Framework != nil {

		if err := m.Framework.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("framework")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {

		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("language")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 1024); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[a-zA-Z0-9 _-]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateRuntime(formats strfmt.Registry) error {

	if swag.IsZero(m.Runtime) { // not required
		return nil
	}

	if m.Runtime != nil {

		if err := m.Runtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MaxLength("version", "body", string(m.Version), 1024); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
