// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogRecord log record
// swagger:model LogRecord
type LogRecord struct {

	// level
	// Max Length: 1024
	Level *string `json:"level,omitempty"`

	// logger name
	// Max Length: 1024
	LoggerName *string `json:"logger_name,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`

	// param message
	// Max Length: 1024
	ParamMessage string `json:"param_message,omitempty"`

	// stacktrace
	Stacktrace LogRecordStacktrace `json:"stacktrace"`
}

// Validate validates this log record
func (m *LogRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLoggerName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParamMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logRecordTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["debug","info","warning","error","fatal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logRecordTypeLevelPropEnum = append(logRecordTypeLevelPropEnum, v)
	}
}

const (
	// LogRecordLevelDebug captures enum value "debug"
	LogRecordLevelDebug string = "debug"
	// LogRecordLevelInfo captures enum value "info"
	LogRecordLevelInfo string = "info"
	// LogRecordLevelWarning captures enum value "warning"
	LogRecordLevelWarning string = "warning"
	// LogRecordLevelError captures enum value "error"
	LogRecordLevelError string = "error"
	// LogRecordLevelFatal captures enum value "fatal"
	LogRecordLevelFatal string = "fatal"
)

// prop value enum
func (m *LogRecord) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logRecordTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogRecord) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	if err := validate.MaxLength("level", "body", string(*m.Level), 1024); err != nil {
		return err
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

func (m *LogRecord) validateLoggerName(formats strfmt.Registry) error {

	if swag.IsZero(m.LoggerName) { // not required
		return nil
	}

	if err := validate.MaxLength("logger_name", "body", string(*m.LoggerName), 1024); err != nil {
		return err
	}

	return nil
}

func (m *LogRecord) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *LogRecord) validateParamMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.ParamMessage) { // not required
		return nil
	}

	if err := validate.MaxLength("param_message", "body", string(m.ParamMessage), 1024); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogRecord) UnmarshalBinary(b []byte) error {
	var res LogRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
