// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson24c21128DecodeGithubComElasticApmServerModels(in *jlexer.Lexer, out *SpanContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "db":
			if in.IsNull() {
				in.Skip()
				out.Db = nil
			} else {
				if out.Db == nil {
					out.Db = new(SpanContextDb)
				}
				easyjson24c21128DecodeGithubComElasticApmServerModels1(in, &*out.Db)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24c21128EncodeGithubComElasticApmServerModels(out *jwriter.Writer, in SpanContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Db != nil {
		const prefix string = ",\"db\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson24c21128EncodeGithubComElasticApmServerModels1(out, *in.Db)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpanContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24c21128EncodeGithubComElasticApmServerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpanContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24c21128EncodeGithubComElasticApmServerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpanContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24c21128DecodeGithubComElasticApmServerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpanContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24c21128DecodeGithubComElasticApmServerModels(l, v)
}
func easyjson24c21128DecodeGithubComElasticApmServerModels1(in *jlexer.Lexer, out *SpanContextDb) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instance":
			out.Instance = string(in.String())
		case "statement":
			out.Statement = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24c21128EncodeGithubComElasticApmServerModels1(out *jwriter.Writer, in SpanContextDb) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Instance != "" {
		const prefix string = ",\"instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Instance))
	}
	if in.Statement != "" {
		const prefix string = ",\"statement\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Statement))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	out.RawByte('}')
}
