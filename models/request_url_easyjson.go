// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEf6f69c7DecodeGithubComElasticApmServerModels(in *jlexer.Lexer, out *RequestURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "full":
			out.Full = string(in.String())
		case "hash":
			out.Hash = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "pathname":
			out.Pathname = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "raw":
			out.Raw = string(in.String())
		case "search":
			out.Search = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEf6f69c7EncodeGithubComElasticApmServerModels(out *jwriter.Writer, in RequestURL) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Full != "" {
		const prefix string = ",\"full\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Full))
	}
	if in.Hash != "" {
		const prefix string = ",\"hash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hash))
	}
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	if in.Pathname != "" {
		const prefix string = ",\"pathname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pathname))
	}
	if in.Port != "" {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Port))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	if in.Raw != "" {
		const prefix string = ",\"raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Raw))
	}
	if in.Search != "" {
		const prefix string = ",\"search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Search))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestURL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEf6f69c7EncodeGithubComElasticApmServerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestURL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEf6f69c7EncodeGithubComElasticApmServerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestURL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEf6f69c7DecodeGithubComElasticApmServerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEf6f69c7DecodeGithubComElasticApmServerModels(l, v)
}
