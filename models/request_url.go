// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestURL request Url
// swagger:model requestUrl
type RequestURL struct {

	// full
	// Max Length: 1024
	Full string `json:"full,omitempty"`

	// hash
	// Max Length: 1024
	Hash string `json:"hash,omitempty"`

	// hostname
	// Max Length: 1024
	Hostname string `json:"hostname,omitempty"`

	// pathname
	// Max Length: 1024
	Pathname string `json:"pathname,omitempty"`

	// port
	// Max Length: 1024
	Port string `json:"port,omitempty"`

	// protocol
	// Max Length: 1024
	Protocol string `json:"protocol,omitempty"`

	// raw
	// Max Length: 1024
	Raw string `json:"raw,omitempty"`

	// search
	// Max Length: 1024
	Search string `json:"search,omitempty"`
}

// Validate validates this request Url
func (m *RequestURL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFull(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePathname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSearch(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestURL) validateFull(formats strfmt.Registry) error {

	if swag.IsZero(m.Full) { // not required
		return nil
	}

	if err := validate.MaxLength("full", "body", string(m.Full), 1024); err != nil {
		return err
	}

	return nil
}

func (m *RequestURL) validateHash(formats strfmt.Registry) error {

	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if err := validate.MaxLength("hash", "body", string(m.Hash), 1024); err != nil {
		return err
	}

	return nil
}

func (m *RequestURL) validateHostname(formats strfmt.Registry) error {

	if swag.IsZero(m.Hostname) { // not required
		return nil
	}

	if err := validate.MaxLength("hostname", "body", string(m.Hostname), 1024); err != nil {
		return err
	}

	return nil
}

func (m *RequestURL) validatePathname(formats strfmt.Registry) error {

	if swag.IsZero(m.Pathname) { // not required
		return nil
	}

	if err := validate.MaxLength("pathname", "body", string(m.Pathname), 1024); err != nil {
		return err
	}

	return nil
}

func (m *RequestURL) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MaxLength("port", "body", string(m.Port), 1024); err != nil {
		return err
	}

	return nil
}

func (m *RequestURL) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := validate.MaxLength("protocol", "body", string(m.Protocol), 1024); err != nil {
		return err
	}

	return nil
}

func (m *RequestURL) validateRaw(formats strfmt.Registry) error {

	if swag.IsZero(m.Raw) { // not required
		return nil
	}

	if err := validate.MaxLength("raw", "body", string(m.Raw), 1024); err != nil {
		return err
	}

	return nil
}

func (m *RequestURL) validateSearch(formats strfmt.Registry) error {

	if swag.IsZero(m.Search) { // not required
		return nil
	}

	if err := validate.MaxLength("search", "body", string(m.Search), 1024); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestURL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestURL) UnmarshalBinary(b []byte) error {
	var res RequestURL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
