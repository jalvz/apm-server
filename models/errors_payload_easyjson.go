// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson143d5632DecodeGithubComElasticApmServerModels(in *jlexer.Lexer, out *ErrorsPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errors":
			if in.IsNull() {
				in.Skip()
				out.Errors = nil
			} else {
				in.Delim('[')
				if out.Errors == nil {
					if !in.IsDelim(']') {
						out.Errors = make(ErrorsPayloadErrors, 0, 8)
					} else {
						out.Errors = ErrorsPayloadErrors{}
					}
				} else {
					out.Errors = (out.Errors)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Error
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Error)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Errors = append(out.Errors, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "process":
			if in.IsNull() {
				in.Skip()
				out.Process = nil
			} else {
				if out.Process == nil {
					out.Process = new(Process)
				}
				easyjson143d5632DecodeGithubComElasticApmServerModels1(in, &*out.Process)
			}
		case "service":
			if in.IsNull() {
				in.Skip()
				out.Service = nil
			} else {
				if out.Service == nil {
					out.Service = new(Service)
				}
				easyjson143d5632DecodeGithubComElasticApmServerModels2(in, &*out.Service)
			}
		case "system":
			if in.IsNull() {
				in.Skip()
				out.System = nil
			} else {
				if out.System == nil {
					out.System = new(System)
				}
				easyjson143d5632DecodeGithubComElasticApmServerModels3(in, &*out.System)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson143d5632EncodeGithubComElasticApmServerModels(out *jwriter.Writer, in ErrorsPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Errors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Errors {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Process != nil {
		const prefix string = ",\"process\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson143d5632EncodeGithubComElasticApmServerModels1(out, *in.Process)
	}
	{
		const prefix string = ",\"service\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Service == nil {
			out.RawString("null")
		} else {
			easyjson143d5632EncodeGithubComElasticApmServerModels2(out, *in.Service)
		}
	}
	if in.System != nil {
		const prefix string = ",\"system\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson143d5632EncodeGithubComElasticApmServerModels3(out, *in.System)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorsPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson143d5632EncodeGithubComElasticApmServerModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorsPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson143d5632EncodeGithubComElasticApmServerModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorsPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson143d5632DecodeGithubComElasticApmServerModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorsPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson143d5632DecodeGithubComElasticApmServerModels(l, v)
}
func easyjson143d5632DecodeGithubComElasticApmServerModels3(in *jlexer.Lexer, out *System) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "architecture":
			out.Architecture = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson143d5632EncodeGithubComElasticApmServerModels3(out *jwriter.Writer, in System) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Architecture != "" {
		const prefix string = ",\"architecture\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Architecture))
	}
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	out.RawByte('}')
}
func easyjson143d5632DecodeGithubComElasticApmServerModels2(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agent":
			if in.IsNull() {
				in.Skip()
				out.Agent = nil
			} else {
				if out.Agent == nil {
					out.Agent = new(Agent)
				}
				(*out.Agent).UnmarshalEasyJSON(in)
			}
		case "environment":
			out.Environment = string(in.String())
		case "framework":
			if in.IsNull() {
				in.Skip()
				out.Framework = nil
			} else {
				if out.Framework == nil {
					out.Framework = new(Framework)
				}
				easyjson143d5632DecodeGithubComElasticApmServerModels4(in, &*out.Framework)
			}
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				if out.Language == nil {
					out.Language = new(Language)
				}
				easyjson143d5632DecodeGithubComElasticApmServerModels5(in, &*out.Language)
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "runtime":
			if in.IsNull() {
				in.Skip()
				out.Runtime = nil
			} else {
				if out.Runtime == nil {
					out.Runtime = new(Runtime)
				}
				easyjson143d5632DecodeGithubComElasticApmServerModels6(in, &*out.Runtime)
			}
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson143d5632EncodeGithubComElasticApmServerModels2(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Agent == nil {
			out.RawString("null")
		} else {
			(*in.Agent).MarshalEasyJSON(out)
		}
	}
	if in.Environment != "" {
		const prefix string = ",\"environment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Environment))
	}
	if in.Framework != nil {
		const prefix string = ",\"framework\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson143d5632EncodeGithubComElasticApmServerModels4(out, *in.Framework)
	}
	if in.Language != nil {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson143d5632EncodeGithubComElasticApmServerModels5(out, *in.Language)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Runtime != nil {
		const prefix string = ",\"runtime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson143d5632EncodeGithubComElasticApmServerModels6(out, *in.Runtime)
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}
func easyjson143d5632DecodeGithubComElasticApmServerModels6(in *jlexer.Lexer, out *Runtime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(string)
				}
				*out.Version = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson143d5632EncodeGithubComElasticApmServerModels6(out *jwriter.Writer, in Runtime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Version == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Version))
		}
	}
	out.RawByte('}')
}
func easyjson143d5632DecodeGithubComElasticApmServerModels5(in *jlexer.Lexer, out *Language) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson143d5632EncodeGithubComElasticApmServerModels5(out *jwriter.Writer, in Language) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	out.RawByte('}')
}
func easyjson143d5632DecodeGithubComElasticApmServerModels4(in *jlexer.Lexer, out *Framework) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(string)
				}
				*out.Version = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson143d5632EncodeGithubComElasticApmServerModels4(out *jwriter.Writer, in Framework) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Name))
		}
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Version == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Version))
		}
	}
	out.RawByte('}')
}
func easyjson143d5632DecodeGithubComElasticApmServerModels1(in *jlexer.Lexer, out *Process) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "argv":
			if in.IsNull() {
				in.Skip()
				out.Argv = nil
			} else {
				in.Delim('[')
				if out.Argv == nil {
					if !in.IsDelim(']') {
						out.Argv = make([]string, 0, 4)
					} else {
						out.Argv = []string{}
					}
				} else {
					out.Argv = (out.Argv)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Argv = append(out.Argv, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pid":
			if in.IsNull() {
				in.Skip()
				out.Pid = nil
			} else {
				if out.Pid == nil {
					out.Pid = new(int64)
				}
				*out.Pid = int64(in.Int64())
			}
		case "ppid":
			out.Ppid = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson143d5632EncodeGithubComElasticApmServerModels1(out *jwriter.Writer, in Process) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"argv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Argv == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Argv {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Pid == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Pid))
		}
	}
	if in.Ppid != 0 {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Ppid))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
