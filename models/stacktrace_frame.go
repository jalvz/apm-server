// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StacktraceFrame stacktrace frame
// swagger:model StacktraceFrame
type StacktraceFrame struct {

	// abs path
	AbsPath string `json:"abs_path,omitempty"`

	// colno
	Colno int64 `json:"colno,omitempty"`

	// context line
	ContextLine string `json:"context_line,omitempty"`

	// filename
	// Required: true
	Filename *string `json:"filename"`

	// function
	Function string `json:"function,omitempty"`

	// library frame
	LibraryFrame bool `json:"library_frame,omitempty"`

	// lineno
	// Required: true
	Lineno *int64 `json:"lineno"`

	// module
	Module string `json:"module,omitempty"`

	// post context
	PostContext []string `json:"post_context"`

	// pre context
	PreContext []string `json:"pre_context"`

	// vars
	Vars map[string]interface{} `json:"vars,omitempty"`
}

// Validate validates this stacktrace frame
func (m *StacktraceFrame) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilename(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLineno(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePostContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StacktraceFrame) validateFilename(formats strfmt.Registry) error {

	if err := validate.Required("filename", "body", m.Filename); err != nil {
		return err
	}

	return nil
}

func (m *StacktraceFrame) validateLineno(formats strfmt.Registry) error {

	if err := validate.Required("lineno", "body", m.Lineno); err != nil {
		return err
	}

	return nil
}

func (m *StacktraceFrame) validatePostContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PostContext) { // not required
		return nil
	}

	return nil
}

func (m *StacktraceFrame) validatePreContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PreContext) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StacktraceFrame) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StacktraceFrame) UnmarshalBinary(b []byte) error {
	var res StacktraceFrame
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
