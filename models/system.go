// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// System system
// swagger:model System
type System struct {

	// architecture
	// Max Length: 1024
	Architecture string `json:"architecture,omitempty"`

	// hostname
	// Max Length: 1024
	Hostname string `json:"hostname,omitempty"`

	// platform
	// Max Length: 1024
	Platform string `json:"platform,omitempty"`
}

// Validate validates this system
func (m *System) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *System) validateArchitecture(formats strfmt.Registry) error {

	if swag.IsZero(m.Architecture) { // not required
		return nil
	}

	if err := validate.MaxLength("architecture", "body", string(m.Architecture), 1024); err != nil {
		return err
	}

	return nil
}

func (m *System) validateHostname(formats strfmt.Registry) error {

	if swag.IsZero(m.Hostname) { // not required
		return nil
	}

	if err := validate.MaxLength("hostname", "body", string(m.Hostname), 1024); err != nil {
		return err
	}

	return nil
}

func (m *System) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	if err := validate.MaxLength("platform", "body", string(m.Platform), 1024); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *System) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *System) UnmarshalBinary(b []byte) error {
	var res System
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
